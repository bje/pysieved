[main]
# Authentication back-end to use
auth    = passwd

# User DB back-end to use
userdb  = passwd

# Storage back-end to use
storage = Dovecot

# If a formatter is specified, SIEVE scripts will be filtered
# through that plugin when they are stored and retrieved.
formatter = Dovecot

# Bind to what address?  (Ignored with --stdin)
#bindaddr = 127.0.0.1

# Listen on what port?  (Ignored with --stdin)
port    = 2000

# Write a pidfile here
pidfile = /var/run/pysieved.pid

# Prepend this path to result of userdb lookup if not absolute
#base = /var/mail

# Where to create temporary files
#tmpdir = /tmp


[TLS]
# Require STARTTLS before authentication
#required = False

# TLS private key file
#key = /etc/ssl/private/woozle.org.key

# TLS certificate file
#cert = /etc/ssl/private/woozle.org.pem

# Passphrase if the TLS private key is encrypted
# (this file should not be world-readable !)
#passphrase = magic


[SASL]
# How do we identify ourself to saslauthd?
service = managesieve

# Where's the magic mux file?
mux = /var/run/saslauthd/mux


[PAM]
# How do we identify ourself to PAM?
service = pysieved


[Virtual]
# Path to storage.  %u = user, %d = domain
path = /usr/local/virtual/%d/%u

# What domain to use if no domain name is specified by the user
#defaultdomain =

# What UID and GID should own all files?  -1 to not bother
uid = 1001
gid = 1001


[LDAP]
# Where the LDAP server is located.
ldap_url = ldap://127.0.0.1

# Credentials to connect to the LDAP server and perform the user search.
bind_dn = cn=root
bind_pw = foobar

# Whether to use the bind method of authentication
# (the alternative is to have pysieved compare passwords,
# which requires the password attribute to be readable
# with the above credentials).
auth_bind = True

# Base, scope and filter to perform the user search.
# In the filter, the available substitutions are :
# %l : login (as provided by the user for authentication)
# %u : username part of login
# %d : domain part of login (defaultdomain if none)
# %m : email address (as derived from %u@%d)
base = 
scope = sub
filter = uid=%u
#default_domain =

# What UID and GID to use if not found in LDAP ?
default_uid = 1001
default_gid = 1001

# Attributes to look for.
#pw_attr = userPassword
#uid_attr = uidNumber
#gid_attr = gidNumber
#home_attr = homeDirectory


[MySQL]
dbhost = localhost
dbuser = user
dbpass = pass
dbname = db
auth_query = SELECT username FROM users WHERE username = "%(username)s" AND password = "%(password)s" AND (active = "1")
user_query = SELECT homedir FROM users WHERE username = "%(username)s" AND (active = "1")

list_query = SELECT name FROM sieve WHERE address = "%(username)s"
get_query = SELECT script FROM sieve WHERE address = "%(username)s" AND name = "%(name)s"
update_query = UPDATE sieve SET script = "%(script)s" WHERE address = "%(username)s" AND name = "%(name)s"
insert_query = INSERT INTO sieve ( address , name , script ) values ( "%(username)s" , "%(name)s" , "%(script)s" ) 
delete_query = DELETE FROM sieve WHERE address = "%(username)s" AND name = "%(name)s"
active_query = SELECT name FROM sieve WHERE address = "%(username)s" AND active > 0 LIMIT 1
set_active_query = UPDATE sieve SET active = 1 WHERE address = "%(username)s" AND name = "%(name)s"
clear_active_query = UPDATE sieve SET active = 0 WHERE address = "%(username)s" AND status > 0


[htpasswd]
passwdfile = /etc/exim/virtual/passwd


[Dovecot]
# Path to Dovecot's auth socket (do not set unless you're using Dovecot auth)
#mux = /var/spool/postfix/auth/dovecot

# Path to Dovecot's master socket (if using Dovecot userdb lookup)
#master = /var/run/dovecot/auth-master

# Path to sievec
sievec = /usr/lib/dovecot/sievec

# Where in user directory to store scripts
scripts = .pysieved

# Filename used for the active SIEVE filter (see README.Dovecot)
active = .dovecot.sieve

# What user/group owns the mail storage (-1 to never setuid/setgid)
uid = -1
gid = -1


[Exim]
# Path to sendmail
sendmail = /usr/sbin/sendmail

# Where in user directory to store scripts
scripts = .pysieved

# Filename used for the active SIEVE filter
active = .forward

# What user/group owns the mail storage (-1 to never setuid/setgid)
uid = -1
gid = -1
